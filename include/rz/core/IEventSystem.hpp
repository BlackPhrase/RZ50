/* 
 * This file is part of RZ Engine
 * Copyright (c) 2017-2019 BlackPhrase
 * 
 * This program is free software: you can redistribute it and/or modify  
 * it under the terms of the GNU Lesser General Public License as published by  
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

namespace rz::core
{

struct TEvent
{
	/// Pre-defined event types
	enum class Type : int
	{
		Invalid = -1,   ///<
		
		FrameBegin,     ///< Start of a new frame
		FrameEnd,       ///< End of the current frame
		PreUpdate,
		PostUpdate,
		MouseMove, // CursorMove      ///< This event should be generated by the input module
		MouseScroll,
		MouseButton,    ///< Mouse button press/release
		KeyboardKey, //KeyPress ///< Keyboard button press/release
		
		SizeOf // Count
	};
	
	/// Name of the event
	const char *sName{""};
	
	/// Type of the event
	Type eType{Type::Invalid};
	
	// ...
};

struct TFrameBeginEvent : TEvent
{
	TFrameBeginEvent()
	{
		sName = "FrameBegin";
		eType = TEvent::Type::FrameBegin;
	};
	
	int nFrame{0};
};

struct TFrameEndEvent : TEvent
{
	TFrameEndEvent()
	{
		sName = "FrameEnd";
		eType = TEvent::Type::FrameEnd;
	};
	
	double fFrameTime{0.0f};
};

struct TMouseMoveEvent : TEvent
{
	TMouseMoveEvent(int anDeltaX, int anDeltaY) : nDeltaX(anDeltaX), nDeltaY(anDeltaY)
	{
		sName = "MouseMove";
		eType = TEvent::Type::MouseMove;
	};
	
	int nDeltaX{0};
	int nDeltaY{0};
};

struct TMouseButtonEvent : TEvent
{
	TMouseButtonEvent()
	{
		sName = "MouseButton";
		eType = TEvent::Type::MouseButton;
	};
	
	enum class MouseButtonState : int
	{
		Pressed,
		Released
	};
	
	//IMouse::Button eButton{};
	MouseButtonState eState{};
	//int nPosX{0};
	//int nPosY{0};
};

struct TKeyboardKeyEvent : TEvent
{
	TKeyboardKeyEvent()
	{
		sName = "KeyboardKey";
		eType = TEvent::Type::KeyboardKey;
	};
	
	enum class KeyState : int
	{
		Pressed,
		Released
	};
	
	//IKeyboard::Key eKey{};
	KeyState eState{};
};

struct IEventListener
{
	///
	virtual void OnEvent(const TEvent &aEvent) = 0;
};

struct IEventDispatcher
{
	/// Dispatch the event immediately
	virtual void BroadcastEvent(const TEvent &aEvent) = 0;
	
	/// Que the event to dispatch it a bit later
	virtual void QueEvent(const TEvent &aEvent) = 0;
	
	/// Add the event listener
	virtual void AddListener(IEventListener &aListener) = 0;
	
	/// Remove the event listener
	virtual void RemoveListener(const IEventListener &aListener) = 0;
	
	///
	//virtual void PollEvent(TEvent &aEvent) = 0;
	
	///
	//virtual void GetEvent(TEvent &aEvent) = 0;
};

}; // namespace rz::core