#pragma once

namespace rz
{

struct TEvent
{
	/// Pre-defined event types
	enum class Type : int
	{
		Invalid = -1,   ///<
		
		FrameBegin,     ///< Start of a new frame
		FrameEnd,       ///< End of the current frame
		MouseMove, // CursorMove      ///< This event should be generated by the input module
		MouseScroll,
		MouseButton,    ///< Mouse button press/release
		KeyboardKey, //KeyPress ///< Keyboard button press/release
		
		SizeOf // Count
	};
	
	/// Name of the event
	const char *sName{""};
	
	/// Type of the event
	Type eType{Type::Invalid};
	
	// ...
};

struct TFrameBeginEvent : TEvent
{
	TFrameBeginEvent()
	{
		sName = "FrameBegin";
		eType = TEvent::Type::FrameBegin;
	};
	
	int nFrame{0};
};

struct TFrameEndEvent : TEvent
{
	TFrameEndEvent()
	{
		sName = "FrameEnd";
		eType = TEvent::Type::FrameEnd;
	};
	
	double fFrameTime{0.0f};
};

struct TMouseMoveEvent : TEvent
{
	TMouseMove()
	{
		sName = "MouseMove";
		eType = TEvent::Type::MouseMove;
	};
	
	int nDeltaX{0};
	int nDeltaY{0};
};

struct TMouseButtonEvent : TEvent
{
	TMouseButtonEvent()
	{
		sName = "MouseButton";
		eType = TEvent::Type::MouseButton;
	};
	
	enum class MouseButtonState : int
	{
		Pressed,
		Released
	};
	
	enum class MouseButton : int
	{
		Left,
		Right,
		Middle
	};
	
	MouseButton eButton{};
	MouseButtonState eState{};
	//int nPosX{0};
	//int nPosY{0};
};

struct TKeyboardKeyEvent : TEvent
{
	TKeyboardKeyEvent()
	{
		sName = "KeyboardKey";
		eType = TEvent::Type::KeyboardKey;
	};
	
	enum class KeyState : int
	{
		Pressed,
		Released
	};
	
	enum class KeyboardKey : int
	{
		W,
		A,
		S,
		D,
		
		E,
		R,
		
		Esc,
		
		Left,
		Right,
		Up,
		Down,
		
		Space,
		Enter,
		Tab,
		CapsLock,
		
		LeftShift,
		RightShift,
		
		LeftCtrl,
		RightCtrl,
		
		LeftAlt,
		RightAlt,
		
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		F11,
		F12,
		
		Zero,
		One,
		Two,
		Three,
		Four,
		Five,
		Six,
		Seven,
		Eight,
		Nine,
		
		Num1,
		Num2,
		Num3,
		Num4,
		Num5,
		Num6,
		Num7,
		Num8,
		Num9,
		Num0,
		
		// TODO
	};
	
	KeyboardKey eKey{};
	KeyState eState{};
};

struct IEventListener
{
	///
	virtual void OnEvent(const TEvent &aEvent) = 0;
};

struct IEventDispatcher
{
	///
	virtual void AddListener(const IEventListener &aListener) = 0;
	
	///
	virtual void RemoveListener(const IEventListener &aListener) = 0;
};

struct IEventManager
{
	/// Dispatch the event immediately
	virtual void BroadcastEvent(const TEvent &aEvent) = 0;
	
	/// Que the event to dispatch it a bit later
	virtual void QueEvent(const TEvent &aEvent) = 0;
	
	/// Add the event listener
	virtual void AddListener(const IEventListener &aListener) = 0;
	
	/// Remove the event listener
	virtual void RemoveListener(const IEventListener &aListener) = 0;
	
	///
	//virtual void PollEvent(TEvent &aEvent) = 0;
	
	///
	//virtual void GetEvent(TEvent &aEvent) = 0;
};

}; // namespace rz